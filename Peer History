// const wrtc = require('wrtc');
// const Exchange = require('peer-exchange');
// const p2p = new Exchange(...);
// const net = require("net");
// const messageType = { ... };
// const { ... } = messageType;

// class PeerToPeer {
  // constructor(karchain) { ... }
  // startServer(port) { ... }
  // discoverPeers() { ... }
  // connectToPeer(host, port) { ... }
  // closeConnection() { ... }
  // broadcastLatest() { ... }
  // broadcast(message) { ... }
  // write(peer, message) { ... }
  // initConnection(connection) { ... }
  // initMessageHandler(connection) { ... }
  // initErrorHandler(connection) { ... }
  // handleMessage(peer, message) { ... }

  handleReceivedLatestBar(message, peer) {
    const receivedBar = message.data;
    const latestBar = this.karchain.latestBar;

    if (latestBar.hash === receivedBar.previousHash) {
      try {
        this.blockchain.addBar(receivedBar);
      } catch(err) {
        throw err;
      }
    } else if (receivedBar.index > latestBar.index) {
      this.write(peer, Messages.getKarchain());
    } else {
      // Do nothing.
    }
  }
// }

// module.exports = PeerToPeer;
// class Messages { ... }
